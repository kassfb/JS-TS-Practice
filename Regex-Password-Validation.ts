// https://www.codewars.com/kata/52e1476c8147a7547a000811/typescript

// Title:
// Regex Password Validation

// Description:
// You need to write regex that will validate a password to make sure it meets the following criteria:

// At least six characters long
// contains a lowercase letter
// contains an uppercase letter
// contains a digit
// only contains alphanumeric characters (note that '_' is not alphanumeric)

// Regular Expressions Fundamentals

// SOLUTION 1:
export const REGEXP = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z0-9]{6,}$/;

// Разбор по частям:
// ^ — начало строки.
// (?= ) — lookahead.
// (?=.*[a-z]) — где-то есть строчная буква.
// (?=.*[A-Z]) — где-то есть заглавная буква.
// (?=.*\d) — где-то есть цифра.
// [a-zA-Z0-9]{6,} — вся строка состоит только из латинских букв и цифр, минимум 6 символов.
// $ — конец строки.

// Пояснения:
// Разберем Выражение (?=.*[a-z])
// (?=     .*       [a-z]    )
//  │       │         │       └── закрывающая скобка lookahead
//  │       │         └── "найди одну строчную латинскую букву"
//  │       └── "пропусти любое количество любых символов (включая 0)"
//  └── начало позитивного опережающего утверждения (positive lookahead)

// Что такое .* 
// . — "любой символ" (кроме перевода строки \n, если не включён флаг s). Один символ — любой: буква, цифра, знак препинания, пробел и т.д. Примеры: 'a', '5', '@', ' ', 'Я' — всё подходит под точку (если это не \n).
// * — "ноль или больше повторений предыдущего элемента".
// То есть, .* = ноль или больше любых символов.
// Это жадный квантификатор — он захватит максимально возможное количество символов, чтобы выражение в целом совпало.
// .* — это как "пролистай всё, что видишь, до нужного места".

// Простая аналогия — представь, что ты ищешь иголку в стоге сена:
// (?=[a-z]) — "иголка должна лежать прямо у входа в стог".
// (?=.*[a-z]) — "иголка может быть где угодно в стоге — я готов его весь перерыть".
